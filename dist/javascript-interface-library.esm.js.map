{"version":3,"file":"javascript-interface-library.esm.js","sources":["../src/javascript-interface-library.ts"],"sourcesContent":["//----------------------------------------------------------------------------//\n//                        JavaScript Interface Library                        //\n//----------------------------------------------------------------------------//\n\n/**** get a reference to the \"global\" object ****/\n\n  export const global = Function('return this')()\n// see https://stackoverflow.com/questions/3277182/how-to-get-the-global-object-in-javascript\n\n//------------------------------------------------------------------------------\n//--                             Object Functions                             --\n//------------------------------------------------------------------------------\n// allow methods from Object.prototype to be applied to \"vanilla\" objects\n\n/**** Object_hasOwnProperty ****/\n\n  export function Object_hasOwnProperty (Value:Object, PropertyName:string):boolean {\n    return (\n      (Value == null) ||              // let this method crash like its original\n      ('hasOwnProperty' in Value) && (typeof Value.hasOwnProperty === 'function')\n      ? Value.hasOwnProperty(PropertyName)\n      : Object.prototype.hasOwnProperty.call(Value,PropertyName)\n    )\n  }\n\n/**** Object_isPrototypeOf ****/\n\n  export function Object_isPrototypeOf (Value:Object, Candidate:any):boolean {\n    return (\n      (Value == null) ||              // let this method crash like its original\n      ('isPrototypeOf' in Value) && (typeof Value.isPrototypeOf === 'function')\n      ? Value.isPrototypeOf(Candidate)\n      : Object.prototype.isPrototypeOf.call(Value,Candidate)\n    )\n  }\n\n/**** Object_propertyIsEnumerable ****/\n\n  export function Object_propertyIsEnumerable (Value:Object, PropertyName:string):boolean {\n    return (\n      (Value == null) ||              // let this method crash like its original\n      ('propertyIsEnumerable' in Value) && (typeof Value.propertyIsEnumerable === 'function')\n      ? Value.propertyIsEnumerable(PropertyName)\n      : Object.prototype.propertyIsEnumerable.call(Value,PropertyName)\n    )\n  }\n\n/**** Object_toString ****/\n\n  export function Object_toString (Value:Object):string {\n    return (\n      (Value == null) ||              // let this method crash like its original\n      ('toString' in Value) && (typeof Value.toString === 'function')\n      ? Value.toString()\n      : Object.prototype.toString.call(Value)\n    )\n  }\n\n/**** Object_toLocaleString ****/\n\n  export function Object_toLocaleString (Value:Object):string {\n    return (\n      (Value == null) ||              // let this method crash like its original\n      ('toLocaleString' in Value) && (typeof Value.toLocaleString === 'function')\n      ? Value.toLocaleString()\n      : Object.prototype.toString.call(Value)\n    ) // a missing \"toLocaleString\" method will crash Object.prototype.toLocaleString\n  }\n\n/**** Object_valueOf ****/\n\n  export function Object_valueOf (Value:Object):any {\n    return (\n      (Value == null) ||              // let this method crash like its original\n      ('valueOf' in Value) && (typeof Value.valueOf === 'function')\n      ? Value.valueOf()\n      : Object.prototype.valueOf.call(Value)\n    )\n  }\n\n/**** ObjectMergedWith ****/\n\n  export function ObjectMergedWith (\n    TargetObject:object, ...otherObjectList:object[]\n  ):object {\n    for (let i = 0, l = otherObjectList.length; i < l; i++) {\n      let otherObject = otherObjectList[i]\n      if (otherObject == null) { continue }\n\n      if (typeof otherObject === 'object') {\n        for (let Key in otherObject) {\n          let Descriptor = Object.getOwnPropertyDescriptor(otherObject,Key)\n          if (Descriptor != null) {\n            Object.defineProperty(TargetObject,Key,Descriptor)\n          }\n        }\n      } else {\n        throwError('InvalidArgument: argument #' + (i+1) + ' is not an object')\n      }\n    }\n\n    return TargetObject\n  }\n\n/**** throwError - simplifies construction of named errors ****/\n\n  export function throwError (Message:string):never {\n    let Match = /^([$a-zA-Z][$a-zA-Z0-9]*):\\s*(\\S.+)\\s*$/.exec(Message)\n    if (Match == null) {\n      throw new Error(Message)\n    } else {\n      let namedError = new Error(Match[2])\n        namedError.name = Match[1]\n      throw namedError\n    }\n  }\n\n//------------------------------------------------------------------------------\n//--                      Value Classification Functions                      --\n//------------------------------------------------------------------------------\n\n/**** ValueExists ****/\n\n  export function ValueExists (Value:any):boolean {\n    return (Value != null)\n  }\n\n/**** ValueIsMissing ****/\n\n  export function ValueIsMissing (Value:any):boolean {\n    return (Value == null)\n  }\n\n/**** ValueIsBoolean ****/\n\n  export function ValueIsBoolean (Value:any):boolean {\n    return (typeof Value === 'boolean') || (Value instanceof Boolean)\n  }\n\n/**** ValueIsNumber ****/\n\n  export function ValueIsNumber (Value:any):boolean {\n    return (typeof Value === 'number') || (Value instanceof Number)\n  }\n\n/**** ValueIsFiniteNumber (pure \"isFinite\" breaks on objects) ****/\n\n  export function ValueIsFiniteNumber (Value:any):boolean {\n    return (\n      (typeof Value === 'number') || (Value instanceof Number)\n    ) && isFinite(Value.valueOf())\n  }\n\n/**** ValueIsNaN (numeric, but NaN - this differs from pure \"isNaN\") ****/\n\n  export function ValueIsNaN (Value:any):boolean {\n    return (\n      (typeof Value === 'number') || (Value instanceof Number)\n    ) && isNaN(Value.valueOf())\n  }\n\n/**** ValueIsNumberInRange ****/\n\n  export function ValueIsNumberInRange (\n    Value:any, minValue?:number, maxValue?:number,\n    withMin:boolean = true, withMax:boolean = true\n  ):boolean {\n    if (! ValueIsNumber(Value) || isNaN(Value)) { return false }\n\n    if (ValueIsFiniteNumber(minValue)) {    // more robust than \"isFinite\" alone\n      if (ValueIsFiniteNumber(maxValue)) {  // more robust than \"isFinite\" alone\n        if (\n          (Value < (minValue as Number)) || (! withMin && (Value === minValue)) ||\n          (Value > (maxValue as Number)) || (! withMax && (Value === maxValue))\n        ) {\n          return false\n        }\n      } else {\n        if ((Value < (minValue as Number)) || (! withMin && (Value === minValue))) {\n          return false\n        }\n      }\n    } else {\n      if (ValueIsFiniteNumber(maxValue)) {  // more robust than \"isFinite\" alone\n        if ((Value > (maxValue as Number)) || (! withMax && (Value === maxValue))) {\n          return false\n        }\n      }\n    }\n\n    return true\n  }\n\n/**** ValueIsInteger ****/\n\n  export function ValueIsInteger (Value:any):boolean {\n    if ((typeof Value !== 'number') && ! (Value instanceof Number)) {\n      return false\n    }\n\n    Value = Value.valueOf()\n    return isFinite(Value) && (Math.round(Value) === Value)\n  }\n\n/**** ValueIsIntegerInRange ****/\n\n  export function ValueIsIntegerInRange (\n    Value:any, minValue?:number, maxValue?:number\n  ):boolean {\n    if (! ValueIsInteger(Value) || isNaN(Value)) { return false }\n\n    if (ValueIsFiniteNumber(minValue)) {    // more robust than \"isFinite\" alone\n      if (ValueIsFiniteNumber(maxValue)) {  // more robust than \"isFinite\" alone\n        if ((Value < (minValue as Number)) || (Value > (maxValue as Number))) {\n          return false\n        }\n      } else {\n        if (Value < (minValue as Number)) {\n          return false\n        }\n      }\n    } else {\n      if (ValueIsFiniteNumber(maxValue)) {  // more robust than \"isFinite\" alone\n        if (Value > (maxValue as Number)) {\n          return false\n        }\n      }\n    }\n\n    return true\n  }\n\n/**** ValueIsOrdinal ****/\n\n  export function ValueIsOrdinal (Value:any):boolean {\n    if ((typeof Value !== 'number') && ! (Value instanceof Number)) {\n      return false\n    }\n\n    Value = Value.valueOf()\n    return isFinite(Value) && (Math.round(Value) === Value) && (Value >= 0)\n  }\n\n/**** ValueIsCardinal ****/\n\n  export function ValueIsCardinal (Value:any):boolean {\n    if ((typeof Value !== 'number') && ! (Value instanceof Number)) {\n      return false\n    }\n\n    Value = Value.valueOf()\n    return isFinite(Value) && (Math.round(Value) === Value) && (Value >= 1)\n  }\n\n/**** ValueIsString ****/\n\n  export function ValueIsString (Value:any):boolean {\n    return (typeof Value === 'string') || (Value instanceof String)\n  }\n\n/**** ValueIsNonEmptyString ****/\n\n  const emptyStringPattern = /^\\s*$/\n\n  export function ValueIsNonEmptyString (Value:any):boolean {\n    return (\n      (typeof Value === 'string') || (Value instanceof String)\n    ) && ! emptyStringPattern.test(Value.valueOf())\n  }\n\n/**** ValueIsStringMatching ****/\n\n  export function ValueIsStringMatching (Value:any, pattern:RegExp):boolean {\n    return (\n      (typeof Value === 'string') || (Value instanceof String)\n    ) && pattern.test(Value.valueOf())\n  }\n\n/**** ValueIsText ****/\n\n  const noCtrlCharsButCRLFPattern = /^[^\\x00-\\x09\\x0B\\x0C\\x0E-\\x1F\\x7F-\\x9F\\u2028\\u2029\\uFFF9-\\uFFFB]*$/\n\n  export function ValueIsText (Value:any):boolean {\n    return ValueIsStringMatching(Value,noCtrlCharsButCRLFPattern)\n  }\n\n/**** ValueIsTextline ****/\n\n  const noCtrlCharsPattern = /^[^\\x00-\\x1F\\x7F-\\x9F\\u2028\\u2029\\uFFF9-\\uFFFB]*$/\n\n  export function ValueIsTextline (Value:any):boolean {\n    return ValueIsStringMatching(Value,noCtrlCharsPattern)\n  }\n\n/**** ValueIsFunction ****/\n\n  export function ValueIsFunction (Value:any):boolean {\n    return (typeof Value === 'function')\n  }\n\n/**** ValueIsAnonymousFunction ****/\n\n  export function ValueIsAnonymousFunction (Value:any):boolean {\n    return (\n      (typeof Value === 'function') &&\n      ((Value.name == null) || (Value.name === ''))\n    )\n  }\n\n/**** ValueIsNamedFunction ****/\n\n  export function ValueIsNamedFunction (Value:any):boolean {\n    return (\n      (typeof Value === 'function') &&\n      (Value.name != null) && (Value.name !== '')\n    )\n  }\n\n/**** ValueIsNativeFunction ****/\n\n  export function ValueIsNativeFunction (Value:any):boolean {\n    return (\n      (typeof Value === 'function') &&\n      /^function\\s*[^(]*\\(\\)\\s*\\{\\s*\\[native code\\]\\s*\\}\\s*$/.test(Value.toString())\n    )\n  }\n\n/**** ValueIsScriptedFunction ****/\n\n  export function ValueIsScriptedFunction (Value:any):boolean {\n    return (\n      (typeof Value === 'function') &&\n      ! /^function\\s*[^(]*\\(\\)\\s*\\{\\s*\\[native code\\]\\s*\\}\\s*$/.test(Value.toString())\n    )\n  }\n\n/**** ValueIsObject ****/\n\n  export function ValueIsObject (Value:any):boolean {\n    return (Value != null) && (typeof Value === 'object')\n  }\n\n/**** ValueIsPlainObject ****/\n\n  export function ValueIsPlainObject (Value:any):boolean {\n    return (\n      (Value != null) && (typeof Value === 'object') &&\n      (Object.getPrototypeOf(Value) === Object.prototype)\n    )\n  }\n\n/**** ValueIsVanillaObject ****/\n\n  export function ValueIsVanillaObject (Value:any):boolean {\n    return (\n      (Value != null) && (typeof Value === 'object') &&\n      ! (Value instanceof Object)\n    )\n  }\n\n/**** ValueIsArray ****/\n\n  export let ValueIsArray = Array.isArray\n\n/**** ValueIsList (\"dense\" array) ****/\n\n  export function ValueIsList (\n    Value:any, minLength?:number, maxLength?:number\n  ):boolean {\n    if (ValueIsArray(Value)) {\n      for (let i = 0, l = Value.length; i < l; i++) {\n        if (Value[i] === undefined) { return false }\n      }\n\n      if (minLength != null) {\n        if (Value.length < minLength) { return false }\n      }\n\n      if (maxLength != null) {\n        if (Value.length > maxLength) { return false }\n      }\n      return true\n    }\n\n    return false\n  }\n\n/**** ValueIsListSatisfying ****/\n\n  export function ValueIsListSatisfying (\n    Value:any, Validator:Function, minLength?:number, maxLength?:number\n  ):boolean {\n    if (ValueIsArray(Value)) {\n      try {\n        for (let i = 0, l = Value.length; i < l; i++) {\n          if (Validator(Value[i]) == false) { return false }\n        }\n\n        if (minLength != null) {\n          if (Value.length < minLength) { return false }\n        }\n\n        if (maxLength != null) {\n          if (Value.length > maxLength) { return false }\n        }\n        return true\n      } catch (Signal) { /* nop */ }\n    }\n\n    return false\n  }\n\n/**** ValueIsInstanceOf ****/\n\n  export function ValueIsInstanceOf (Value:any, constructor:Function):boolean {\n    return (Value instanceof constructor)\n  }\n\n/**** ValueInheritsFrom ****/\n\n  export function ValueInheritsFrom (Value:any, prototype:Object):boolean {\n    return Object_isPrototypeOf(prototype,Value)\n  }\n\n/**** ValueIsDate ****/\n\n  export function ValueIsDate (Value:any):boolean {\n    return (Value instanceof Date)\n  }\n\n/**** ValueIsError ****/\n\n  export function ValueIsError (Value:any):boolean {\n    return (Value instanceof Error)\n  }\n\n/**** ValueIsPromise ****/\n\n  export function ValueIsPromise (Value:any):boolean {\n    return (Value != null) && (typeof Value.then === 'function')\n  }\n// see https://stackoverflow.com/questions/27746304/how-do-i-tell-if-an-object-is-a-promise\n\n/**** ValueIsRegExp ****/\n\n  export function ValueIsRegExp (Value:any):boolean {\n    return (Value instanceof RegExp)\n  }\n\n/**** ValueIsOneOf ****/\n\n  export function ValueIsOneOf (Value:any, ValueList:any[]):boolean {\n    return (ValueList.indexOf(Value) >= 0)\n  }                     // no automatic unboxing of boxed values and vice-versa!\n\n/**** ValueIsColor ****/\n\n  export function ValueIsColor (Value:any):boolean {\n    return ValueIsString(Value) && (\n      ColorSet.hasOwnProperty (Value) ||\n      /^#[a-fA-F0-9]{6}$/.test(Value) ||\n      /^#[a-fA-F0-9]{8}$/.test(Value) ||\n      /^rgb\\([0-9]+,\\s*[0-9]+,\\s*[0-9]+\\)$/.test(Value) ||        // not perfect\n      /^rgba\\([0-9]+,\\s*[0-9]+,\\s*[0-9]+,([01]|[0]?[.][0-9]+)\\)$/.test(Value) // dto.\n    )\n  }\n\n/**** ValueIsEMailAddress ****/\n\n  const EMailAddressPattern = /(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9]))\\.){3}(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])/\n  // see https://stackoverflow.com/questions/201323/how-to-validate-an-email-address-using-a-regular-expression\n\n  export function ValueIsEMailAddress (Value:any):boolean {\n    return ValueIsStringMatching(Value, EMailAddressPattern)\n  }\n\n/**** ValueIsURL ****/\n\n  const noCtrlCharsOrWhitespacePattern = /^[^\\s\\x00-\\x1F\\x7F-\\x9F\\u2028\\u2029\\uFFF9-\\uFFFB]*$/\n\n  export function ValueIsURL (Value:any):boolean {\n    if (\n      ! ValueIsStringMatching(Value, noCtrlCharsOrWhitespacePattern) ||\n      (Value === '')\n    ) { return false }\n\n    try {\n      new URL(Value, 'file://')\n      return true\n    } catch (Signal) {\n      return false\n    }\n  }\n\n//------------------------------------------------------------------------------\n//--                      Argument Validation Functions                       --\n//------------------------------------------------------------------------------\n\n  export const rejectNil = false\n  export const acceptNil = true\n\n/**** validatedArgument ****/\n\n  export function validatedArgument (\n    Description:string, Argument:any, ValueIsValid:(Value:any) => boolean,\n    NilIsAcceptable:boolean, Expectation:string\n  ):any|null|undefined {\n    if (Argument == null) {\n      if (NilIsAcceptable) {\n        return Argument\n      } else {\n        throwError(`MissingArgument: no ${escaped(Description)} given`)\n      }\n    } else {\n      if (ValueIsValid(Argument)) {\n        switch (true) {\n          case Argument instanceof Boolean:\n          case Argument instanceof Number:\n          case Argument instanceof String:\n            return Argument.valueOf()                  // unboxes any primitives\n          default:\n            return Argument\n        }\n      } else {\n        throwError(\n          `InvalidArgument: the given ${escaped(Description)} is no valid ${escaped(Expectation)}`\n        )\n      }\n    }\n  }\n\n/**** ValidatorForClassifier ****/\n\n  export function ValidatorForClassifier (\n    Classifier:(Value:any) => boolean, NilIsAcceptable:boolean,\n    Expectation:string\n  ):Function {\n    let Validator = function (Description:string, Argument:any):any {\n      return validatedArgument(\n        Description, Argument, Classifier, NilIsAcceptable, Expectation\n      )\n    }\n\n    let ClassifierName = Classifier.name\n    if ((ClassifierName != null) && /^ValueIs/.test(ClassifierName)) {\n      let ValidatorName = ClassifierName.replace(  // derive name from validator\n        /^ValueIs/, NilIsAcceptable ? 'allow' : 'expect'\n      )\n      return FunctionWithName(Validator,ValidatorName)\n    } else {\n      return Validator                              // without any specific name\n    }\n  }\n\n/**** FunctionWithName (works with older JS engines as well) ****/\n\n  export function FunctionWithName (\n    originalFunction:Function, desiredName:string|String\n  ):Function {\n    if (originalFunction == null) {\n      throwError('MissingArgument: no function given')\n    }\n    if (typeof originalFunction !== 'function') {\n      throwError('InvalidArgument: the given 1st Argument is not a JavaScript function')\n    }\n\n    if (desiredName == null) {\n      throwError('MissingArgument: no desired name given')\n    }\n    if ((typeof desiredName !== 'string') && ! (desiredName instanceof String)) {\n      throwError('InvalidArgument: the given desired name is not a string')\n    }\n\n    if (originalFunction.name === desiredName) { return originalFunction }\n\n    try {\n      Object.defineProperty(originalFunction, 'name', { value:desiredName })\n      if (originalFunction.name === desiredName) { return originalFunction }\n    } catch (signal) { /* ok - let's take the hard way */ }\n\n    let renamed = new Function(\n      'originalFunction', 'return function ' + desiredName + ' () {' +\n        'return originalFunction.apply(this,Array.prototype.slice.apply(arguments))' +\n      '}'\n    )\n    return renamed(originalFunction)\n  }                                  // also works with older JavaScript engines\n\n/**** expect[ed]Value ****/\n\n  export function expectValue (Description:string, Argument:any):any {\n    if (Argument == null) {\n      throwError(`MissingArgument: no ${escaped(Description)} given`)\n    } else {\n      return Argument.valueOf()\n    }\n  }\n  export const expectedValue = expectValue\n\n/**** allow/expect[ed]Boolean ****/\n\n  export const allowBoolean = ValidatorForClassifier(\n    ValueIsBoolean, acceptNil, 'boolean value'\n  ), allowedBoolean = allowBoolean\n\n  export const expectBoolean = ValidatorForClassifier(\n    ValueIsBoolean, rejectNil, 'boolean value'\n  ), expectedBoolean = expectBoolean\n\n/**** allow/expect[ed]Number ****/\n\n  export const allowNumber = ValidatorForClassifier(\n    ValueIsNumber, acceptNil, 'numeric value'\n  ), allowedNumber = allowNumber\n\n  export const expectNumber = ValidatorForClassifier(\n    ValueIsNumber, rejectNil, 'numeric value'\n  ), expectedNumber = expectNumber\n\n/**** allow/expect[ed]FiniteNumber ****/\n\n  export const allowFiniteNumber = ValidatorForClassifier(\n    ValueIsFiniteNumber, acceptNil, 'finite numeric value'\n  ), allowedFiniteNumber = allowFiniteNumber\n\n  export const expectFiniteNumber = ValidatorForClassifier(\n    ValueIsFiniteNumber, rejectNil, 'finite numeric value'\n  ), expectedFiniteNumber = expectFiniteNumber\n\n/**** allow/expect[ed]NaN ****/\n\n  export const allowNaN = ValidatorForClassifier(\n    ValueIsNaN, acceptNil, 'NaN value'\n  ), allowedNaN = allowNaN\n\n  export const expectNaN = ValidatorForClassifier(\n    ValueIsNaN, rejectNil, 'NaN value'\n  ), expectedNaN = expectNaN\n\n/**** allow[ed]NumberInRange ****/\n\n  export function allowNumberInRange (\n    Description:string, Argument:any,\n    minValue?:number, maxValue?:number, withMin?:boolean, withMax?:boolean\n  ):number|null|undefined {\n    return (Argument == null\n      ? Argument\n      : expectedNumberInRange(Description, Argument, minValue,maxValue, withMin,withMax)\n    )\n  }\n  export const allowedNumberInRange = allowNumberInRange\n\n/**** expect[ed]NumberInRange ****/\n\n  export function expectNumberInRange (\n    Description:string, Argument:any,\n    minValue?:number, maxValue?:number, withMin?:boolean, withMax?:boolean\n  ):number {\n    expectNumber(Description, Argument)\n\n    if (isNaN(Argument)) {\n      throwError(\n        `InvalidArgument: the given ${escaped(Description)} is not-a-number`\n      )\n    }\n\n    if (withMin == null) { withMin = true }\n    if (withMax == null) { withMax = true }\n\n    if ((minValue != null) && isFinite(minValue)) {\n      if ((maxValue != null) && isFinite(maxValue)) {\n        if (\n          (Argument < minValue) || (! withMin && (Argument === minValue)) ||\n          (Argument > maxValue) || (! withMax && (Argument === maxValue))\n        ) {\n          throw new RangeError(\n            `the given ${escaped(Description)} (${Argument}) is outside ` +\n            `the allowed range (${minValue}...${maxValue})`\n          )\n        }\n      } else {\n        if ((Argument < minValue) || (! withMin && (Argument === minValue))) {\n          throw new RangeError(\n            `the given ${escaped(Description)} is below the allowed ` +\n            `minimum (${Argument} ${withMin ? '<' : '<='} ${minValue})`\n          )\n        }\n      }\n    } else {\n      if ((maxValue != null) && isFinite(maxValue)) {\n        if ((Argument > maxValue) || (! withMax && (Argument === maxValue))) {\n          throw new RangeError(\n            `the given ${escaped(Description)} exceeds the allowed ` +\n            `maximum (${Argument} ${withMax ? '>' : '>='} ${maxValue})`\n          )\n        }\n      }\n    }\n\n    return Argument.valueOf()\n  }\n  export const expectedNumberInRange = expectNumberInRange\n\n/**** allow/expect[ed]Integer ****/\n\n  export const allowInteger = ValidatorForClassifier(\n    ValueIsInteger, acceptNil, 'integral numeric value'\n  ), allowedInteger = allowInteger\n\n  export const expectInteger = ValidatorForClassifier(\n    ValueIsInteger, rejectNil, 'integral numeric value'\n  ), expectedInteger = expectInteger\n\n/**** allow[ed]IntegerInRange ****/\n\n  export function allowIntegerInRange (\n    Description:string, Argument:any, minValue?:number, maxValue?:number\n  ):number|null|undefined {\n    return (Argument == null\n      ? Argument\n      : expectedIntegerInRange(Description, Argument, minValue,maxValue)\n    )\n  }\n  export const allowedIntegerInRange = allowIntegerInRange\n\n/**** expect[ed]IntegerInRange ****/\n\n  export function expectIntegerInRange (\n    Description:string, Argument:any, minValue?:number, maxValue?:number\n  ):number {\n    expectInteger(Description, Argument)\n\n    if (isNaN(Argument)) {\n      throwError(\n        `InvalidArgument: the given ${escaped(Description)} is not-a-number`\n      )\n    }\n\n    if ((minValue != null) && isFinite(minValue)) {\n      if ((maxValue != null) && isFinite(maxValue)) {\n        if ((Argument < minValue) || (Argument > maxValue)) {\n          throw new RangeError(\n            `the given ${escaped(Description)} (${Argument}) is outside ` +\n            `the allowed range (${minValue}...${maxValue})`\n          )\n        }\n      } else {\n        if (Argument < minValue) {\n          throw new RangeError(\n            `the given ${escaped(Description)} is below the allowed ` +\n            `minimum (${Argument} < ${minValue})`\n          )\n        }\n      }\n    } else {\n      if ((maxValue != null) && isFinite(maxValue)) {\n        if (Argument > maxValue) {\n          throw new RangeError(\n            `the given ${escaped(Description)} exceeds the allowed ` +\n            `maximum (${Argument} > ${maxValue})`\n          )\n        }\n      }\n    }\n\n    return Argument.valueOf()\n  }\n  export const expectedIntegerInRange = expectIntegerInRange\n\n/**** allow/expect[ed]Ordinal ****/\n\n  export const allowOrdinal = ValidatorForClassifier(\n    ValueIsOrdinal, acceptNil, 'ordinal number'\n  ), allowedOrdinal = allowOrdinal\n\n  export const expectOrdinal = ValidatorForClassifier(\n    ValueIsOrdinal, rejectNil, 'ordinal number'\n  ), expectedOrdinal = expectOrdinal\n\n/**** allow/expect[ed]Cardinal ****/\n\n  export const allowCardinal = ValidatorForClassifier(\n    ValueIsCardinal, acceptNil, 'cardinal number'\n  ), allowedCardinal = allowCardinal\n\n  export const expectCardinal = ValidatorForClassifier(\n    ValueIsCardinal, rejectNil, 'cardinal number'\n  ), expectedCardinal = expectCardinal\n\n/**** allow/expect[ed]String ****/\n\n  export const allowString = ValidatorForClassifier(\n    ValueIsString, acceptNil, 'literal string'\n  ), allowedString = allowString\n\n  export const expectString = ValidatorForClassifier(\n    ValueIsString, rejectNil, 'literal string'\n  ), expectedString = expectString\n\n/**** allow/expect[ed]NonEmptyString ****/\n\n  export const allowNonEmptyString = ValidatorForClassifier(\n    ValueIsNonEmptyString, acceptNil, 'non-empty literal string'\n  ), allowedNonEmptyString = allowNonEmptyString\n\n  export const expectNonEmptyString = ValidatorForClassifier(\n    ValueIsNonEmptyString, rejectNil, 'non-empty literal string'\n  ), expectedNonEmptyString = expectNonEmptyString\n\n/**** allow[ed]StringMatching ****/\n\n  export function allowStringMatching (\n    Description:string, Argument:any, pattern:RegExp\n  ):string|null|undefined {\n    return (Argument == null\n      ? Argument\n      : expectedStringMatching(Description, Argument, pattern)\n    )\n  }\n  export const allowedStringMatching = allowStringMatching\n\n/**** expect[ed]StringMatching ****/\n\n  export function expectStringMatching (\n    Description:string, Argument:any, pattern:RegExp\n  ):string {\n    expectString(Description, Argument)\n\n    if (pattern.test(Argument)) {\n      return Argument.valueOf()\n    } else {\n      throwError(\n        `InvalidArgument: the given ${escaped(Description)} does not match the specified pattern`\n      )\n    }\n  }\n  export const expectedStringMatching = expectStringMatching\n\n/**** allow/expect[ed]Text ****/\n\n  export const allowText = ValidatorForClassifier(\n    ValueIsText, acceptNil, 'literal text'\n  ), allowedText = allowText\n\n  export const expectText = ValidatorForClassifier(\n    ValueIsText, rejectNil, 'literal text'\n  ), expectedText = expectText\n\n/**** allow/expect[ed]Textline ****/\n\n  export const allowTextline = ValidatorForClassifier(\n    ValueIsTextline, acceptNil, 'single line of text'\n  ), allowedTextline = allowTextline\n\n  export const expectTextline = ValidatorForClassifier(\n    ValueIsTextline, rejectNil, 'single line of text'\n  ), expectedTextline = expectTextline\n\n/**** allow/expect[ed]Function ****/\n\n  export const allowFunction = ValidatorForClassifier(\n    ValueIsFunction, acceptNil, 'JavaScript function'\n  ), allowedFunction = allowFunction\n\n  export const expectFunction = ValidatorForClassifier(\n    ValueIsFunction, rejectNil, 'JavaScript function'\n  ), expectedFunction = expectFunction\n\n/**** allow/expect[ed]AnonymousFunction ****/\n\n  export const allowAnonymousFunction = ValidatorForClassifier(\n    ValueIsAnonymousFunction, acceptNil, 'anonymous JavaScript function'\n  ), allowedAnonymousFunction = allowAnonymousFunction\n\n  export const expectAnonymousFunction = ValidatorForClassifier(\n    ValueIsAnonymousFunction, rejectNil, 'anonymous JavaScript function'\n  ), expectedAnonymousFunction = expectAnonymousFunction\n\n/**** allow/expect[ed]NamedFunction ****/\n\n  export const allowNamedFunction = ValidatorForClassifier(\n    ValueIsNamedFunction, acceptNil, 'named JavaScript function'\n  ), allowedNamedFunction = allowNamedFunction\n\n  export const expectNamedFunction = ValidatorForClassifier(\n    ValueIsNamedFunction, rejectNil, 'named JavaScript function'\n  ), expectedNamedFunction = expectNamedFunction\n\n/**** allow/expect[ed]NativeFunction ****/\n\n  export const allowNativeFunction = ValidatorForClassifier(\n    ValueIsNativeFunction, acceptNil, 'native JavaScript function'\n  ), allowedNativeFunction = allowNativeFunction\n\n  export const expectNativeFunction = ValidatorForClassifier(\n    ValueIsNativeFunction, rejectNil, 'native JavaScript function'\n  ), expectedNativeFunction = expectNativeFunction\n\n/**** allow/expect[ed]ScriptedFunction ****/\n\n  export const allowScriptedFunction = ValidatorForClassifier(\n    ValueIsScriptedFunction, acceptNil, 'scripted JavaScript function'\n  ), allowedScriptedFunction = allowScriptedFunction\n\n  export const expectScriptedFunction = ValidatorForClassifier(\n    ValueIsScriptedFunction, rejectNil, 'scripted JavaScript function'\n  ), expectedScriptedFunction = expectScriptedFunction\n\n/**** allow/expect[ed]Object ****/\n\n  export const allowObject = ValidatorForClassifier(\n    ValueIsObject, acceptNil, 'JavaScript object'\n  ), allowedObject = allowObject\n\n  export const expectObject = ValidatorForClassifier(\n    ValueIsObject, rejectNil, 'JavaScript object'\n  ), expectedObject = expectObject\n\n/**** allow/expect[ed]PlainObject ****/\n\n  export const allowPlainObject = ValidatorForClassifier(\n    ValueIsPlainObject, acceptNil, '\"plain\" JavaScript object'\n  ), allowedPlainObject = allowPlainObject\n\n  export const expectPlainObject = ValidatorForClassifier(\n    ValueIsPlainObject, rejectNil, '\"plain\" JavaScript object'\n  ), expectedPlainObject = expectPlainObject\n\n/**** allow/expect[ed]VanillaObject ****/\n\n  export const allowVanillaObject = ValidatorForClassifier(\n    ValueIsVanillaObject, acceptNil, '\"vanilla\" JavaScript object'\n  ), allowedVanillaObject = allowVanillaObject\n\n  export const expectVanillaObject = ValidatorForClassifier(\n    ValueIsVanillaObject, rejectNil, '\"vanilla\" JavaScript object'\n  ), expectedVanillaObject = expectVanillaObject\n\n/**** allow[ed]Array ****/\n\n  export function allowArray (Description:string, Argument:any):any[]|null|undefined {\n    return (Argument == null\n      ? Argument\n      : expectedArray(Description,Argument)\n    )\n  }\n  export const allowedArray = allowArray\n\n/**** expect[ed]Array ****/\n\n  export function expectArray (Description:string, Argument:any):any[] {\n    if (Argument == null) {\n      throwError(`MissingArgument: no ${escaped(Description)} given`)\n    }\n\n    if (ValueIsArray(Argument)) {\n      return Argument\n    } else {\n      throwError(\n        `InvalidArgument: the given ${escaped(Description)} is no JavaScript array`\n      )\n    }\n  }\n  export const expectedArray = expectArray\n\n/**** allow[ed]List ****/\n\n  export function allowList (\n    Description:string, Argument:any, Expectation?:string,\n    minLength?:number, maxLength?:number\n  ):any[]|null|undefined {\n    return (Argument == null\n      ? Argument\n      : expectedList(Description, Argument, Expectation, minLength,maxLength)\n    )\n  }\n  export const allowedList = allowList\n\n/**** expect[ed]List ****/\n\n  export function expectList (\n    Description:string, Argument:any, Expectation?:string,\n    minLength?:number, maxLength?:number\n  ):any[] {\n    if (Argument == null) {\n      throwError(`MissingArgument: no ${escaped(Description)} given`)\n    }\n\n    if (ValueIsList(Argument, minLength,maxLength)) {\n      return Argument\n    } else {\n      throwError(\n        `InvalidArgument: the given ${escaped(Description)} is ` + (\n          Expectation == null\n          ? 'either not a list or contains an invalid number of elements'\n          : 'no ' + escaped(Expectation)\n        )\n      )\n    }\n  }\n  export const expectedList = expectList\n\n/**** allow[ed]ListSatisfying ****/\n\n  export function allowListSatisfying (\n    Description:string, Argument:any, Validator:(Value:any) => boolean,\n    Expectation?:string, minLength?:number, maxLength?:number\n  ):any[]|null|undefined {\n    return (Argument == null\n      ? Argument\n      : expectedListSatisfying(\n          Description, Argument, Validator, Expectation, minLength,maxLength\n        )\n    )\n  }\n  export const allowedListSatisfying = allowListSatisfying\n\n/**** expect[ed]ListSatisfying ****/\n\n  export function expectListSatisfying (\n    Description:string, Argument:any, Validator:(Value:any) => boolean,\n    Expectation?:string, minLength?:number, maxLength?:number\n  ):any[] {\n    if (Argument == null) {\n      throwError(`MissingArgument: no ${escaped(Description)} given`)\n    }\n\n    if (ValueIsListSatisfying(Argument,Validator, minLength,maxLength)) {\n      return Argument\n    } else {\n      throwError(\n        `InvalidArgument: the given ${escaped(Description)} is ` + (\n          Expectation == null\n          ? 'either not a list or contains invalid elements'\n          : 'no ' + escaped(Expectation)\n        )\n      )\n    }\n  }\n  export const expectedListSatisfying = expectListSatisfying\n\n/**** allow[ed]InstanceOf ****/\n\n  export function allowInstanceOf (\n    Description:string, Argument:any, constructor:Function, Expectation:string\n  ):any|null|undefined {\n    return (Argument == null\n      ? Argument\n      : expectedInstanceOf(Description, Argument, constructor, Expectation)\n    )\n  }\n  export const allowedInstanceOf = allowInstanceOf\n\n/**** expect[ed]InstanceOf ****/\n\n  export function expectInstanceOf (\n    Description:string, Argument:any, constructor:Function, Expectation:string\n  ):any {\n    if (Argument == null) {\n      throwError(`MissingArgument: no ${escaped(Description)} given`)\n    }\n\n    if (! (Argument instanceof constructor)) {\n      throwError(\n        `InvalidArgument: the given ${escaped(Description)} is no ${escaped(Expectation)}`\n      )\n    }\n\n    return Argument\n  }\n  export const expectedInstanceOf = expectInstanceOf\n\n/**** allow[ed]ValueInheritingFrom ****/\n\n  export function allowValueInheritingFrom (\n    Description:string, Argument:any, prototype:any, Expectation:string\n  ):any|null|undefined {\n    return (Argument == null\n      ? Argument\n      : expectedValueInheritingFrom(Description, Argument, prototype, Expectation)\n    )\n  }\n  export const allowedValueInheritingFrom = allowValueInheritingFrom\n\n/**** expect[ed]ValueInheritingFrom ****/\n\n  export function expectValueInheritingFrom (\n    Description:string, Argument:any, prototype:any, Expectation:string\n  ):any {\n    if (Argument == null) {\n      throwError(`MissingArgument: no ${escaped(Description)} given`)\n    }\n\n    if (prototype.isPrototypeOf(Argument)) {\n      return Argument\n    } else {\n      throwError(\n        `InvalidArgument: the given ${escaped(Description)} is no ${escaped(Expectation)}`\n      )\n    }\n  }\n  export const expectedValueInheritingFrom = expectValueInheritingFrom\n\n/**** allow/expect[ed]Date ****/\n\n  export const allowDate = ValidatorForClassifier(\n    ValueIsDate, acceptNil, 'JavaScript Date object'\n  ), allowedDate = allowDate\n\n  export const expectDate = ValidatorForClassifier(\n    ValueIsDate, rejectNil, 'JavaScript Date object'\n  ), expectedDate = expectDate\n\n/**** allow/expect[ed]Error ****/\n\n  export const allowError = ValidatorForClassifier(\n    ValueIsError, acceptNil, 'JavaScript Error object'\n  ), allowedError = allowError\n\n  export const expectError = ValidatorForClassifier(\n    ValueIsError, rejectNil, 'JavaScript Error object'\n  ), expectedError = expectError\n\n/**** allow/expect[ed]Promise ****/\n\n  export const allowPromise = ValidatorForClassifier(\n    ValueIsPromise, acceptNil, 'JavaScript Promise (or \"Thenable\") object'\n  ), allowedPromise = allowPromise\n\n  export const expectPromise = ValidatorForClassifier(\n    ValueIsPromise, rejectNil, 'JavaScript Promise (or \"Thenable\") object'\n  ), expectedPromise = expectPromise\n\n/**** allow/expect[ed]RegExp ****/\n\n  export const allowRegExp = ValidatorForClassifier(\n    ValueIsRegExp, acceptNil, 'JavaScript RegExp object'\n  ), allowedRegExp = allowRegExp\n\n  export const expectRegExp = ValidatorForClassifier(\n    ValueIsRegExp, rejectNil, 'JavaScript RegExp object'\n  ), expectedRegExp = expectRegExp\n\n/**** allow[ed]OneOf ****/\n\n  export function allowOneOf (\n    Description:string, Argument:any, ValueList:any[]\n  ):any|null|undefined {\n    return (Argument == null\n      ? Argument\n      : expectedOneOf(Description, Argument, ValueList)\n    )\n  }\n  export const allowedOneOf = allowOneOf\n\n/**** expect[ed]OneOf ****/\n\n  export function expectOneOf (\n    Description:string, Argument:any, ValueList:any[]\n  ):any {\n    if (Argument == null) {\n      throwError(`MissingArgument: no ${escaped(Description)} given`)\n    }\n\n    if (ValueIsOneOf(Argument,ValueList)) {\n      return (                                         // unboxes any primitives\n        (Argument == null) || (typeof Argument.valueOf !== 'function')\n        ? Argument\n        : Argument.valueOf()\n      )\n    } else {\n      throwError(\n        `InvalidArgument: the given ${escaped(Description)} is not among the supported values`\n      )\n    }\n  }\n  export const expectedOneOf = expectOneOf\n\n/**** allow/expect[ed]Color ****/\n\n  export const allowColor = ValidatorForClassifier(\n    ValueIsColor, acceptNil, 'valid CSS color specification'\n  ), allowedColor = allowColor\n\n  export const expectColor = ValidatorForClassifier(\n    ValueIsColor, rejectNil, 'valid CSS color specification'\n  ), expectedColor = expectColor\n\n/**** allow/expect[ed]EMailAddress ****/\n\n  export const allowEMailAddress = ValidatorForClassifier(\n    ValueIsEMailAddress, acceptNil, 'valid EMail address'\n  ), allowedEMailAddress = allowEMailAddress\n\n  export const expectEMailAddress = ValidatorForClassifier(\n    ValueIsEMailAddress, rejectNil, 'valid EMail address'\n  ), expectedEMailAddress = expectEMailAddress\n\n/**** allow/expect[ed]URL ****/\n\n  export const allowURL = ValidatorForClassifier(\n    ValueIsURL, acceptNil, 'valid URL'\n  ), allowedURL = allowURL\n\n  export const expectURL = ValidatorForClassifier(\n    ValueIsURL, rejectNil, 'valid URL'\n  ), expectedURL = expectURL\n\n/**** escaped - escapes all control characters in a given string ****/\n\n  export function escaped (Text:string):string {\n    const EscapeSequencePattern = /\\\\x[0-9a-zA-Z]{2}|\\\\u[0-9a-zA-Z]{4}|\\\\[0bfnrtv'\"\\\\\\/]?/g\n    const CtrlCharCodePattern  = /[\\x00-\\x1f\\x7f-\\x9f]/g\n\n    return Text\n      .replace(EscapeSequencePattern, function (Match:string):string {\n        return (Match === '\\\\' ? '\\\\\\\\' : Match)\n      })\n      .replace(CtrlCharCodePattern, function (Match:string):string {\n        switch (Match) {\n          case '\\0':  return '\\\\0'\n          case '\\b':  return '\\\\b'\n          case '\\f':  return '\\\\f'\n          case '\\n':  return '\\\\n'\n          case '\\r':  return '\\\\r'\n          case '\\t':  return '\\\\t'\n          case '\\v':  return '\\\\v'\n          default: {\n            let HexCode = Match.charCodeAt(0).toString(16)\n            return '\\\\x' + '00'.slice(HexCode.length) + HexCode\n          }\n        }\n      })\n  }\n\n/**** unescaped - evaluates all escape sequences in a given string ****/\n\n  export function unescaped (Text:string):string {\n    const EscapeSequencePattern = /\\\\[0bfnrtv'\"\\\\\\/]|\\\\x[0-9a-zA-Z]{2}|\\\\u[0-9a-zA-Z]{4}/g\n\n    return Text\n      .replace(EscapeSequencePattern, function (Match:string):string {\n        switch (Match) {\n          case '\\\\0':  return '\\0'\n          case '\\\\b':  return '\\b'\n          case '\\\\f':  return '\\f'\n          case '\\\\n':  return '\\n'\n          case '\\\\r':  return '\\r'\n          case '\\\\t':  return '\\t'\n          case '\\\\v':  return '\\v'\n          case '\\\\\\'': return \"'\"\n          case '\\\\\"':  return '\"'\n          case '\\\\\\\\': return \"\\\\\"\n          default: {\n            let CharCode = parseInt(Match.slice(2),16)\n            return String.fromCharCode(CharCode)\n          }\n        }\n    })\n  }\n\n/**** quotable - makes a given string ready to be put in single/double quotes ****/\n\n  export function quotable (Text:string, Quote:'\"' | \"'\" = '\"'):string {\n    const EscSeqOrSglQuotePattern = /\\\\x[0-9a-zA-Z]{2}|\\\\u[0-9a-zA-Z]{4}|\\\\[0bfnrtv'\"\\\\\\/]?|'/g\n    const EscSeqOrDblQuotePattern = /\\\\x[0-9a-zA-Z]{2}|\\\\u[0-9a-zA-Z]{4}|\\\\[0bfnrtv'\"\\\\\\/]?|\"/g\n    const CtrlCharCodePattern     = /[\\x00-\\x1f\\x7f-\\x9f]/g\n\n    return Text\n      .replace(\n        Quote === \"'\" ? EscSeqOrSglQuotePattern : EscSeqOrDblQuotePattern,\n        function (Match:string):string {\n          switch (Match) {\n            case \"'\":  return \"\\\\'\"\n            case '\"':  return '\\\\\"'\n            case '\\\\': return '\\\\\\\\'\n            default:   return Match\n          }\n        }\n      )\n      .replace(CtrlCharCodePattern, function (Match:string):string {\n        switch (Match) {\n          case '\\0':  return '\\\\0'\n          case '\\b':  return '\\\\b'\n          case '\\f':  return '\\\\f'\n          case '\\n':  return '\\\\n'\n          case '\\r':  return '\\\\r'\n          case '\\t':  return '\\\\t'\n          case '\\v':  return '\\\\v'\n          default: {\n            let HexCode = Match.charCodeAt(0).toString(16)\n            return '\\\\x' + '00'.slice(HexCode.length) + HexCode\n          }\n        }\n      })\n  }\n\n/**** quoted ****/\n\n  export function quoted (Text:string, Quote:'\"' | \"'\" = '\"'):string {\n    return Quote + quotable(Text,Quote) + Quote\n  }\n\n/**** HTMLsafe ****/\n\n  export function HTMLsafe (Argument:string, EOLReplacement?:string):string {\n    EOLReplacement = (EOLReplacement || '').trim() || '<br/>'\n    return Argument.replace(\n      /[&<>\"'\\u0000-\\u001F\\u007F-\\u009F\\\\]/g, function (Match:string):string {\n        switch (Match) {\n          case '&':  return '&amp;'\n          case '<':  return '&lt;'\n          case '>':  return '&gt;'\n          case '\"':  return '&quot;'\n          case \"'\":  return '&apos;'\n          case '\\b': return '&#92;b'\n          case '\\f': return '&#92;f'\n          case '\\n': return EOLReplacement as string\n          case '\\r': return '&#92;r'\n          case '\\t': return '&#92;t'\n          case '\\v': return '&#92;v'\n          case '\\\\': return '&#92;'\n          default:   let Result = Match.charCodeAt(0).toString(16)\n                     return '&#x0000'.substring(3,7-Result.length) + Result + ';'\n        }\n      }\n    )\n  }\n\n/**** MarkDownSafe ****/\n\n  export function MarkDownSafe (Argument:string, EOLReplacement?:string):string {\n    return HTMLsafe(Argument, EOLReplacement).replace(/:/g,'&#58;')\n  }\n\n/**** ValuesDiffer ****/\n\n  export function ValuesDiffer (thisValue:any, otherValue:any):boolean {\n    if (thisValue === otherValue) { return false }\n\n    let thisType = typeof thisValue\n    if (thisType !== typeof otherValue) { return true }\n\n    /**** ArraysDiffer ****/\n\n      function ArraysDiffer (thisArray:any[], otherArray:any[]):boolean {\n        if (! Array.isArray(otherArray)) { return true }\n\n        if (thisArray.length !== otherArray.length) { return true }\n\n        for (let i = 0, l = thisArray.length; i < l; i++) {\n          if (ValuesDiffer(thisArray[i],otherArray[i])) { return true }\n        }\n\n        return false\n      }\n\n    /**** ObjectsDiffer ****/\n\n      function ObjectsDiffer (thisObject:any, otherObject:any):boolean {\n        if (Object.getPrototypeOf(thisObject) !== Object.getPrototypeOf(otherObject)) {\n          return true\n        }\n\n        for (let key in thisObject) {\n          if (! (key in otherObject)) { return true }\n        }\n\n        for (let key in otherObject) {\n          if (! (key in thisObject)) { return true }\n\n          if (ValuesDiffer(thisObject[key],otherObject[key])) {\n            return true\n          }\n        }\n\n        return false\n      }\n\n    switch (thisType) {\n      case 'undefined':\n      case 'boolean':\n      case 'string':\n      case 'string': return true  // most primitives can be compared using \"===\"\n      case 'number': return (\n                       (isNaN(thisValue) !== isNaN(otherValue)) ||\n                       (Math.abs(thisValue-otherValue) > Number.EPSILON)\n                     )\n      case 'object':\n        if (thisValue  == null) { return true }  // since \"other_value\" != null!\n        if (otherValue == null) { return true }   // since \"this_value\" != null!\n\n        if (Array.isArray(thisValue)) {\n          return ArraysDiffer(thisValue,otherValue)\n        }\n\n        return ObjectsDiffer(thisValue,otherValue)\n      default: return true                          // unsupported property type\n    }\n\n    return true\n  }\n\n/**** ValuesAreEqual ****/\n\n  export function ValuesAreEqual (thisValue:any, otherValue:any):boolean {\n    return ! ValuesDiffer(thisValue,otherValue)\n  }\n\n/**** ObjectIsEmpty ****/\n\n  export function ObjectIsEmpty (Candidate:any):boolean {\n    expectObject('candidate',Candidate)\n    for (let Key in Candidate) {\n      if (Object_hasOwnProperty(Candidate,Key)) {\n        return false\n      }\n    }\n    return true\n  }\n\n/**** StringIsEmpty ****/\n\n  export function StringIsEmpty (Candidate:string):boolean {\n    return /^\\s*$/.test(Candidate)\n  }\n\n/**** StringIsNotEmpty ****/\n\n  export function StringIsNotEmpty (Candidate:string):boolean {\n    return ! StringIsEmpty(Candidate)\n  }\n\n//------------------------------------------------------------------------------\n//--                             Color Utilities                              --\n//------------------------------------------------------------------------------\n\n// built-in color names (see http://www.w3.org/TR/SVG/types.html#ColorKeywords) ----\n\n  export const ColorSet = {\n           transparent:'rgba(0,0,0,0,0.0)',\n             aliceblue:'rgba(240,248,255,1.0)',         lightpink:'rgba(255,182,193,1.0)',\n          antiquewhite:'rgba(250,235,215,1.0)',       lightsalmon:'rgba(255,160,122,1.0)',\n                  aqua:'rgba(0,255,255,1.0)',       lightseagreen:'rgba(32,178,170,1.0)',\n            aquamarine:'rgba(127,255,212,1.0)',      lightskyblue:'rgba(135,206,250,1.0)',\n                 azure:'rgba(240,255,255,1.0)',    lightslategray:'rgba(119,136,153,1.0)',\n                 beige:'rgba(245,245,220,1.0)',    lightslategrey:'rgba(119,136,153,1.0)',\n                bisque:'rgba(255,228,196,1.0)',    lightsteelblue:'rgba(176,196,222,1.0)',\n                 black:'rgba(0,0,0,1.0)',             lightyellow:'rgba(255,255,224,1.0)',\n        blanchedalmond:'rgba(255,235,205,1.0)',              lime:'rgba(0,255,0,1.0)',\n                  blue:'rgba(0,0,255,1.0)',             limegreen:'rgba(50,205,50,1.0)',\n            blueviolet:'rgba(138,43,226,1.0)',              linen:'rgba(250,240,230,1.0)',\n                 brown:'rgba(165,42,42,1.0)',             magenta:'rgba(255,0,255,1.0)',\n             burlywood:'rgba(222,184,135,1.0)',            maroon:'rgba(128,0,0,1.0)',\n             cadetblue:'rgba(95,158,160,1.0)',   mediumaquamarine:'rgba(102,205,170,1.0)',\n            chartreuse:'rgba(127,255,0,1.0)',          mediumblue:'rgba(0,0,205,1.0)',\n             chocolate:'rgba(210,105,30,1.0)',       mediumorchid:'rgba(186,85,211,1.0)',\n                 coral:'rgba(255,127,80,1.0)',       mediumpurple:'rgba(147,112,219,1.0)',\n        cornflowerblue:'rgba(100,149,237,1.0)',    mediumseagreen:'rgba(60,179,113,1.0)',\n              cornsilk:'rgba(255,248,220,1.0)',   mediumslateblue:'rgba(123,104,238,1.0)',\n               crimson:'rgba(220,20,60,1.0)',   mediumspringgreen:'rgba(0,250,154,1.0)',\n                  cyan:'rgba(0,255,255,1.0)',     mediumturquoise:'rgba(72,209,204,1.0)',\n              darkblue:'rgba(0,0,139,1.0)',       mediumvioletred:'rgba(199,21,133,1.0)',\n              darkcyan:'rgba(0,139,139,1.0)',        midnightblue:'rgba(25,25,112,1.0)',\n         darkgoldenrod:'rgba(184,134,11,1.0)',          mintcream:'rgba(245,255,250,1.0)',\n              darkgray:'rgba(169,169,169,1.0)',         mistyrose:'rgba(255,228,225,1.0)',\n             darkgreen:'rgba(0,100,0,1.0)',              moccasin:'rgba(255,228,181,1.0)',\n              darkgrey:'rgba(169,169,169,1.0)',       navajowhite:'rgba(255,222,173,1.0)',\n             darkkhaki:'rgba(189,183,107,1.0)',              navy:'rgba(0,0,128,1.0)',\n           darkmagenta:'rgba(139,0,139,1.0)',             oldlace:'rgba(253,245,230,1.0)',\n        darkolivegreen:'rgba(85,107,47,1.0)',               olive:'rgba(128,128,0,1.0)',\n            darkorange:'rgba(255,140,0,1.0)',           olivedrab:'rgba(107,142,35,1.0)',\n            darkorchid:'rgba(153,50,204,1.0)',             orange:'rgba(255,165,0,1.0)',\n               darkred:'rgba(139,0,0,1.0)',             orangered:'rgba(255,69,0,1.0)',\n            darksalmon:'rgba(233,150,122,1.0)',            orchid:'rgba(218,112,214,1.0)',\n          darkseagreen:'rgba(143,188,143,1.0)',     palegoldenrod:'rgba(238,232,170,1.0)',\n         darkslateblue:'rgba(72,61,139,1.0)',           palegreen:'rgba(152,251,152,1.0)',\n         darkslategray:'rgba(47,79,79,1.0)',        paleturquoise:'rgba(175,238,238,1.0)',\n         darkslategrey:'rgba(47,79,79,1.0)',        palevioletred:'rgba(219,112,147,1.0)',\n         darkturquoise:'rgba(0,206,209,1.0)',          papayawhip:'rgba(255,239,213,1.0)',\n            darkviolet:'rgba(148,0,211,1.0)',           peachpuff:'rgba(255,218,185,1.0)',\n              deeppink:'rgba(255,20,147,1.0)',               peru:'rgba(205,133,63,1.0)',\n           deepskyblue:'rgba(0,191,255,1.0)',                pink:'rgba(255,192,203,1.0)',\n               dimgray:'rgba(105,105,105,1.0)',              plum:'rgba(221,160,221,1.0)',\n               dimgrey:'rgba(105,105,105,1.0)',        powderblue:'rgba(176,224,230,1.0)',\n            dodgerblue:'rgba(30,144,255,1.0)',             purple:'rgba(128,0,128,1.0)',\n             firebrick:'rgba(178,34,34,1.0)',                 red:'rgba(255,0,0,1.0)',\n           floralwhite:'rgba(255,250,240,1.0)',         rosybrown:'rgba(188,143,143,1.0)',\n           forestgreen:'rgba(34,139,34,1.0)',           royalblue:'rgba(65,105,225,1.0)',\n               fuchsia:'rgba(255,0,255,1.0)',         saddlebrown:'rgba(139,69,19,1.0)',\n             gainsboro:'rgba(220,220,220,1.0)',            salmon:'rgba(250,128,114,1.0)',\n            ghostwhite:'rgba(248,248,255,1.0)',        sandybrown:'rgba(244,164,96,1.0)',\n                  gold:'rgba(255,215,0,1.0)',            seagreen:'rgba(46,139,87,1.0)',\n             goldenrod:'rgba(218,165,32,1.0)',           seashell:'rgba(255,245,238,1.0)',\n                  gray:'rgba(128,128,128,1.0)',            sienna:'rgba(160,82,45,1.0)',\n                 green:'rgba(0,128,0,1.0)',                silver:'rgba(192,192,192,1.0)',\n           greenyellow:'rgba(173,255,47,1.0)',            skyblue:'rgba(135,206,235,1.0)',\n                  grey:'rgba(128,128,128,1.0)',         slateblue:'rgba(106,90,205,1.0)',\n              honeydew:'rgba(240,255,240,1.0)',         slategray:'rgba(112,128,144,1.0)',\n               hotpink:'rgba(255,105,180,1.0)',         slategrey:'rgba(112,128,144,1.0)',\n             indianred:'rgba(205,92,92,1.0)',                snow:'rgba(255,250,250,1.0)',\n                indigo:'rgba(75,0,130,1.0)',          springgreen:'rgba(0,255,127,1.0)',\n                 ivory:'rgba(255,255,240,1.0)',         steelblue:'rgba(70,130,180,1.0)',\n                 khaki:'rgba(240,230,140,1.0)',               tan:'rgba(210,180,140,1.0)',\n              lavender:'rgba(230,230,250,1.0)',              teal:'rgba(0,128,128,1.0)',\n         lavenderblush:'rgba(255,240,245,1.0)',           thistle:'rgba(216,191,216,1.0)',\n             lawngreen:'rgba(124,252,0,1.0)',              tomato:'rgba(255,99,71,1.0)',\n          lemonchiffon:'rgba(255,250,205,1.0)',         turquoise:'rgba(64,224,208,1.0)',\n             lightblue:'rgba(173,216,230,1.0)',            violet:'rgba(238,130,238,1.0)',\n            lightcoral:'rgba(240,128,128,1.0)',             wheat:'rgba(245,222,179,1.0)',\n             lightcyan:'rgba(224,255,255,1.0)',             white:'rgba(255,255,255,1.0)',\n  lightgoldenrodyellow:'rgba(250,250,210,1.0)',        whitesmoke:'rgba(245,245,245,1.0)',\n             lightgray:'rgba(211,211,211,1.0)',            yellow:'rgba(255,255,0,1.0)',\n            lightgreen:'rgba(144,238,144,1.0)',       yellowgreen:'rgba(154,205,50,1.0)',\n             lightgrey:'rgba(211,211,211,1.0)',\n  }\n\n/**** HexColor - converts a given color to #rrggbbaa ****/\n\n  export function HexColor (Color:string):string {\n    let lowerColor = Color.toLowerCase()\n    if (ColorSet.hasOwnProperty(lowerColor)) {\n// @ts-ignore TS dislikes indexing with literal keys\n      Color = ColorSet[lowerColor]\n    } // do not return here as color is now in RGBA format\n\n    if (/^#[a-fA-F0-9]{6}$/.test(Color)) {\n      return Color + 'FF'\n    }\n\n    if (/^#[a-fA-F0-9]{8}$/.test(Color)) {\n      return Color\n    }\n\n    const HexDigit = '0123456789ABCDEF'\n    function dec2hex (Value:number):string {\n      if (Value > 255) { Value = 255 }\n      return HexDigit[Math.trunc(Value / 16)] + HexDigit[Value % 16]\n    }\n\n    const RGBPattern = /^rgb\\(([0-9]+),\\s*([0-9]+),\\s*([0-9]+)\\)$/i // not perfect\n\n    let Match = RGBPattern.exec(Color)\n    if (Match != null) {\n      return ('#' +\n        dec2hex(parseInt(Match[1],10)) +\n        dec2hex(parseInt(Match[2],10)) +\n        dec2hex(parseInt(Match[3],10)) + 'FF'\n      )\n    }\n\n    const RGBAPattern = /^rgba\\(([(0-9]+),\\s*([0-9]+),\\s*([0-9]+),\\s*([01]?[.][0-9]+|[01])\\)$/i // not perfect\n\n    Match = RGBAPattern.exec(Color)\n    if (Match != null) {\n      return ('#' +\n        dec2hex(parseInt(Match[1],10)) +\n        dec2hex(parseInt(Match[2],10)) +\n        dec2hex(parseInt(Match[3],10)) +\n        dec2hex(parseFloat(Match[4]))\n      )\n    }\n\n    throwError('InvalidArgument: the given Value is not a valid CSS Color specification')\n  }\n\n/**** RGBAColor - converts a given color to RGBA(r,g,b,a) ****/\n\n  export function RGBAColor (Color:string):string {\n    let lowerColor = Color.toLowerCase()\n    if (ColorSet.hasOwnProperty(lowerColor)) {\n// @ts-ignore TS dislikes indexing with literal keys\n      return ColorSet[lowerColor]             // color is already in RGBA format\n    }\n\n    if (/^#[a-fA-F0-9]{6}$/.test(Color)) {\n      return ('rgba(' +\n        parseInt(Color.slice(1,3),16) + ',' +\n        parseInt(Color.slice(3,5),16) + ',' +\n        parseInt(Color.slice(5,7),16) + ', 1' +\n      ')')\n    }\n\n    if (/^#[a-fA-F0-9]{8}$/.test(Color)) {\n      return ('rgba(' +\n        parseInt(Color.slice(1,3),16) + ',' +\n        parseInt(Color.slice(3,5),16) + ',' +\n        parseInt(Color.slice(5,7),16) + ',' +\n        (parseInt(Color.slice(7),16)/255) +\n      ')')\n    }\n\n    const RGBPattern = /^rgb\\(([0-9]+),\\s*([0-9]+),\\s*([0-9]+)\\)$/i //not perfect\n\n    let Match = RGBPattern.exec(Color)\n    if (Match != null) {\n      return Color.slice(0,Color.length-1) + ',1)'\n    }\n\n    const RGBAPattern = /^rgba\\(([(0-9]+),\\s*([0-9]+),\\s*([0-9]+),\\s*([0]?[.][0-9]+|[01])\\)$/i // not perfect\n\n    Match = RGBAPattern.exec(Color)\n    if (Match != null) { return Color }\n\n    throwError('InvalidArgument: the given Value is not a valid CSS Color specification')\n  }\n\n/**** CSSColor - converts #RRGGBBAA into rgba(r,g,b,a) ****/\n\n  export function CSSColor (Color:string):string {\n    return ('rgba(' +\n      parseInt(Color.slice(1,3),16) + ',' +\n      parseInt(Color.slice(3,5),16) + ',' +\n      parseInt(Color.slice(5,7),16) + ',' +\n      (parseInt(Color.slice(7),16)/255) +\n    ')')\n  }\n\n/**** shortCSSColor - converts #RRGGBBAA into #RRGGBB ****/\n\n  export function shortCSSColor (Color:string):string {\n    return HexColor(Color).slice(0,7)\n  }\n\n  if (! ('JIL' in global)) {\n    global['JIL'] = {\n      global,\n      Object_hasOwnProperty, Object_isPrototypeOf, Object_propertyIsEnumerable,\n      Object_toString, Object_toLocaleString, Object_valueOf, ObjectMergedWith,\n      throwError,\n      ValueExists, ValueIsMissing, ValueIsBoolean, ValueIsNumber,\n      ValueIsFiniteNumber, ValueIsNaN, ValueIsNumberInRange, ValueIsInteger,\n      ValueIsIntegerInRange, ValueIsOrdinal, ValueIsCardinal, ValueIsString,\n      ValueIsNonEmptyString, ValueIsStringMatching, ValueIsText, ValueIsTextline,\n      ValueIsFunction, ValueIsAnonymousFunction, ValueIsNamedFunction,\n      ValueIsNativeFunction, ValueIsScriptedFunction, ValueIsObject,\n      ValueIsPlainObject, ValueIsVanillaObject, ValueIsArray, ValueIsList,\n      ValueIsListSatisfying, ValueIsInstanceOf, ValueInheritsFrom, ValueIsDate,\n      ValueIsError, ValueIsPromise, ValueIsRegExp, ValueIsOneOf, ValueIsColor,\n      ValueIsEMailAddress, ValueIsURL,\n      rejectNil, acceptNil,\n      validatedArgument, ValidatorForClassifier, FunctionWithName,\n      expectValue, expectedValue,\n      allowBoolean, allowedBoolean, expectBoolean, expectedBoolean,\n      allowNumber, allowedNumber, expectNumber, expectedNumber,\n      allowFiniteNumber, allowedFiniteNumber, expectFiniteNumber, expectedFiniteNumber,\n      allowNaN, allowedNaN, expectNaN, expectedNaN,\n      allowNumberInRange, allowedNumberInRange, expectNumberInRange, expectedNumberInRange,\n      allowInteger, allowedInteger, expectInteger, expectedInteger,\n      allowIntegerInRange, allowedIntegerInRange, expectIntegerInRange, expectedIntegerInRange,\n      allowOrdinal, allowedOrdinal, expectOrdinal, expectedOrdinal,\n      allowCardinal, allowedCardinal, expectCardinal, expectedCardinal,\n      allowString, allowedString, expectString, expectedString,\n      allowNonEmptyString, allowedNonEmptyString, expectNonEmptyString, expectedNonEmptyString,\n      allowStringMatching, allowedStringMatching, expectStringMatching, expectedStringMatching,\n      allowText, allowedText, expectText, expectedText,\n      allowTextline, allowedTextline, expectTextline, expectedTextline,\n      allowFunction, allowedFunction, expectFunction, expectedFunction,\n      allowAnonymousFunction, allowedAnonymousFunction, expectAnonymousFunction, expectedAnonymousFunction,\n      allowNamedFunction, allowedNamedFunction, expectNamedFunction, expectedNamedFunction,\n      allowNativeFunction, allowedNativeFunction, expectNativeFunction, expectedNativeFunction,\n      allowScriptedFunction, allowedScriptedFunction, expectScriptedFunction, expectedScriptedFunction,\n      allowObject, allowedObject, expectObject, expectedObject,\n      allowPlainObject, allowedPlainObject, expectPlainObject, expectedPlainObject,\n      allowVanillaObject, allowedVanillaObject, expectVanillaObject, expectedVanillaObject,\n      allowArray, allowedArray, expectArray, expectedArray,\n      allowList, allowedList, expectList, expectedList,\n      allowListSatisfying, allowedListSatisfying, expectListSatisfying, expectedListSatisfying,\n      allowInstanceOf, allowedInstanceOf, expectInstanceOf, expectedInstanceOf,\n      allowValueInheritingFrom, allowedValueInheritingFrom, expectValueInheritingFrom, expectedValueInheritingFrom,\n      allowDate, allowedDate, expectDate, expectedDate,\n      allowError, allowedError, expectError, expectedError,\n      allowPromise, allowedPromise, expectPromise, expectedPromise,\n      allowRegExp, allowedRegExp, expectRegExp, expectedRegExp,\n      allowOneOf, allowedOneOf, expectOneOf, expectedOneOf,\n      allowColor, allowedColor, expectColor, expectedColor,\n      allowEMailAddress, allowedEMailAddress, expectEMailAddress, expectedEMailAddress,\n      allowURL, allowedURL, expectURL, expectedURL,\n      escaped, unescaped, quotable, quoted,\n      HTMLsafe, MarkDownSafe,\n      ValuesDiffer, ValuesAreEqual,\n      ObjectIsEmpty, StringIsEmpty, StringIsNotEmpty,\n      ColorSet, HexColor, RGBAColor, CSSColor, shortCSSColor\n    }\n  }\n"],"names":["global","Function","Object_hasOwnProperty","Value","PropertyName","hasOwnProperty","Object","prototype","call","Object_isPrototypeOf","Candidate","isPrototypeOf","Object_propertyIsEnumerable","propertyIsEnumerable","Object_toString","toString","Object_toLocaleString","toLocaleString","Object_valueOf","valueOf","ObjectMergedWith","TargetObject","_i","otherObjectList","i","l","length","otherObject","Key","Descriptor","getOwnPropertyDescriptor","defineProperty","throwError","Message","Match","exec","Error","namedError","name","ValueExists","ValueIsMissing","ValueIsBoolean","Boolean","ValueIsNumber","Number","ValueIsFiniteNumber","isFinite","ValueIsNaN","isNaN","ValueIsNumberInRange","minValue","maxValue","withMin","withMax","ValueIsInteger","Math","round","ValueIsIntegerInRange","ValueIsOrdinal","ValueIsCardinal","ValueIsString","String","emptyStringPattern","ValueIsNonEmptyString","test","ValueIsStringMatching","pattern","noCtrlCharsButCRLFPattern","ValueIsText","noCtrlCharsPattern","ValueIsTextline","ValueIsFunction","ValueIsAnonymousFunction","ValueIsNamedFunction","ValueIsNativeFunction","ValueIsScriptedFunction","ValueIsObject","ValueIsPlainObject","getPrototypeOf","ValueIsVanillaObject","ValueIsArray","Array","isArray","ValueIsList","minLength","maxLength","undefined","ValueIsListSatisfying","Validator","Signal","ValueIsInstanceOf","constructor","ValueInheritsFrom","ValueIsDate","Date","ValueIsError","ValueIsPromise","then","ValueIsRegExp","RegExp","ValueIsOneOf","ValueList","indexOf","ValueIsColor","ColorSet","EMailAddressPattern","ValueIsEMailAddress","noCtrlCharsOrWhitespacePattern","ValueIsURL","URL","rejectNil","acceptNil","validatedArgument","Description","Argument","ValueIsValid","NilIsAcceptable","Expectation","escaped","ValidatorForClassifier","Classifier","ClassifierName","FunctionWithName","replace","originalFunction","desiredName","value","signal","renamed","expectValue","expectedValue","allowBoolean","allowedBoolean","expectBoolean","expectedBoolean","allowNumber","allowedNumber","expectNumber","expectedNumber","allowFiniteNumber","allowedFiniteNumber","expectFiniteNumber","expectedFiniteNumber","allowNaN","allowedNaN","expectNaN","expectedNaN","allowNumberInRange","expectedNumberInRange","allowedNumberInRange","expectNumberInRange","RangeError","allowInteger","allowedInteger","expectInteger","expectedInteger","allowIntegerInRange","expectedIntegerInRange","allowedIntegerInRange","expectIntegerInRange","allowOrdinal","allowedOrdinal","expectOrdinal","expectedOrdinal","allowCardinal","allowedCardinal","expectCardinal","expectedCardinal","allowString","allowedString","expectString","expectedString","allowNonEmptyString","allowedNonEmptyString","expectNonEmptyString","expectedNonEmptyString","allowStringMatching","expectedStringMatching","allowedStringMatching","expectStringMatching","allowText","allowedText","expectText","expectedText","allowTextline","allowedTextline","expectTextline","expectedTextline","allowFunction","allowedFunction","expectFunction","expectedFunction","allowAnonymousFunction","allowedAnonymousFunction","expectAnonymousFunction","expectedAnonymousFunction","allowNamedFunction","allowedNamedFunction","expectNamedFunction","expectedNamedFunction","allowNativeFunction","allowedNativeFunction","expectNativeFunction","expectedNativeFunction","allowScriptedFunction","allowedScriptedFunction","expectScriptedFunction","expectedScriptedFunction","allowObject","allowedObject","expectObject","expectedObject","allowPlainObject","allowedPlainObject","expectPlainObject","expectedPlainObject","allowVanillaObject","allowedVanillaObject","expectVanillaObject","expectedVanillaObject","allowArray","expectedArray","allowedArray","expectArray","allowList","expectedList","allowedList","expectList","allowListSatisfying","expectedListSatisfying","allowedListSatisfying","expectListSatisfying","allowInstanceOf","expectedInstanceOf","allowedInstanceOf","expectInstanceOf","allowValueInheritingFrom","expectedValueInheritingFrom","allowedValueInheritingFrom","expectValueInheritingFrom","allowDate","allowedDate","expectDate","expectedDate","allowError","allowedError","expectError","expectedError","allowPromise","allowedPromise","expectPromise","expectedPromise","allowRegExp","allowedRegExp","expectRegExp","expectedRegExp","allowOneOf","expectedOneOf","allowedOneOf","expectOneOf","allowColor","allowedColor","expectColor","expectedColor","allowEMailAddress","allowedEMailAddress","expectEMailAddress","expectedEMailAddress","allowURL","allowedURL","expectURL","expectedURL","Text","HexCode","charCodeAt","slice","unescaped","CharCode","parseInt","fromCharCode","quotable","Quote","quoted","HTMLsafe","EOLReplacement","trim","Result","substring","MarkDownSafe","ValuesDiffer","thisValue","otherValue","thisType","abs","EPSILON","thisArray","otherArray","ArraysDiffer","thisObject","key","ObjectsDiffer","ValuesAreEqual","ObjectIsEmpty","StringIsEmpty","StringIsNotEmpty","transparent","aliceblue","lightpink","antiquewhite","lightsalmon","aqua","lightseagreen","aquamarine","lightskyblue","azure","lightslategray","beige","lightslategrey","bisque","lightsteelblue","black","lightyellow","blanchedalmond","lime","blue","limegreen","blueviolet","linen","brown","magenta","burlywood","maroon","cadetblue","mediumaquamarine","chartreuse","mediumblue","chocolate","mediumorchid","coral","mediumpurple","cornflowerblue","mediumseagreen","cornsilk","mediumslateblue","crimson","mediumspringgreen","cyan","mediumturquoise","darkblue","mediumvioletred","darkcyan","midnightblue","darkgoldenrod","mintcream","darkgray","mistyrose","darkgreen","moccasin","darkgrey","navajowhite","darkkhaki","navy","darkmagenta","oldlace","darkolivegreen","olive","darkorange","olivedrab","darkorchid","orange","darkred","orangered","darksalmon","orchid","darkseagreen","palegoldenrod","darkslateblue","palegreen","darkslategray","paleturquoise","darkslategrey","palevioletred","darkturquoise","papayawhip","darkviolet","peachpuff","deeppink","peru","deepskyblue","pink","dimgray","plum","dimgrey","powderblue","dodgerblue","purple","firebrick","red","floralwhite","rosybrown","forestgreen","royalblue","fuchsia","saddlebrown","gainsboro","salmon","ghostwhite","sandybrown","gold","seagreen","goldenrod","seashell","gray","sienna","green","silver","greenyellow","skyblue","grey","slateblue","honeydew","slategray","hotpink","slategrey","indianred","snow","indigo","springgreen","ivory","steelblue","khaki","tan","lavender","teal","lavenderblush","thistle","lawngreen","tomato","lemonchiffon","turquoise","lightblue","violet","lightcoral","wheat","lightcyan","white","lightgoldenrodyellow","whitesmoke","lightgray","yellow","lightgreen","yellowgreen","lightgrey","HexColor","Color","lowerColor","toLowerCase","HexDigit","dec2hex","trunc","parseFloat","RGBAColor","CSSColor","shortCSSColor"],"mappings":"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"}